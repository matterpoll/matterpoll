// Code generated by mockery v2.40.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	poll "github.com/matterpoll/matterpoll/server/poll"
	mock "github.com/stretchr/testify/mock"
)

// PollStore is an autogenerated mock type for the PollStore type
type PollStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0
func (_m *PollStore) Delete(_a0 *poll.Poll) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*poll.Poll) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *PollStore) Get(id string) (*poll.Poll, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *poll.Poll
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*poll.Poll, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *poll.Poll); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*poll.Poll)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllKeys provides a mock function with given fields:
func (_m *PollStore) GetAllPollIDs() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllPollIDs")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0
func (_m *PollStore) Insert(_a0 *poll.Poll) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*poll.Poll) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: _a0
func (_m *PollStore) Save(_a0 *poll.Poll) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*poll.Poll) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: prev, new
func (_m *PollStore) Update(prev *poll.Poll, new *poll.Poll) error {
	ret := _m.Called(prev, new)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*poll.Poll, *poll.Poll) error); ok {
		r0 = rf(prev, new)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPollStore creates a new instance of PollStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPollStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *PollStore {
	mock := &PollStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
