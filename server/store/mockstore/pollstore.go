// Code generated by mockery. DO NOT EDIT.

package mockstore

import (
	poll "github.com/matterpoll/matterpoll/server/poll"
	mock "github.com/stretchr/testify/mock"
)

// PollStore is an autogenerated mock type for the PollStore type
type PollStore struct {
	mock.Mock
}

type PollStore_Expecter struct {
	mock *mock.Mock
}

func (_m *PollStore) EXPECT() *PollStore_Expecter {
	return &PollStore_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: _a0
func (_m *PollStore) Delete(_a0 *poll.Poll) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*poll.Poll) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PollStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type PollStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 *poll.Poll
func (_e *PollStore_Expecter) Delete(_a0 interface{}) *PollStore_Delete_Call {
	return &PollStore_Delete_Call{Call: _e.mock.On("Delete", _a0)}
}

func (_c *PollStore_Delete_Call) Run(run func(_a0 *poll.Poll)) *PollStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*poll.Poll))
	})
	return _c
}

func (_c *PollStore_Delete_Call) Return(_a0 error) *PollStore_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PollStore_Delete_Call) RunAndReturn(run func(*poll.Poll) error) *PollStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: id
func (_m *PollStore) Get(id string) (*poll.Poll, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *poll.Poll
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*poll.Poll, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *poll.Poll); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*poll.Poll)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PollStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type PollStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id string
func (_e *PollStore_Expecter) Get(id interface{}) *PollStore_Get_Call {
	return &PollStore_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *PollStore_Get_Call) Run(run func(id string)) *PollStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PollStore_Get_Call) Return(_a0 *poll.Poll, _a1 error) *PollStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PollStore_Get_Call) RunAndReturn(run func(string) (*poll.Poll, error)) *PollStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: _a0
func (_m *PollStore) Insert(_a0 *poll.Poll) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*poll.Poll) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PollStore_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type PollStore_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - _a0 *poll.Poll
func (_e *PollStore_Expecter) Insert(_a0 interface{}) *PollStore_Insert_Call {
	return &PollStore_Insert_Call{Call: _e.mock.On("Insert", _a0)}
}

func (_c *PollStore_Insert_Call) Run(run func(_a0 *poll.Poll)) *PollStore_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*poll.Poll))
	})
	return _c
}

func (_c *PollStore_Insert_Call) Return(_a0 error) *PollStore_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PollStore_Insert_Call) RunAndReturn(run func(*poll.Poll) error) *PollStore_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: _a0
func (_m *PollStore) Save(_a0 *poll.Poll) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*poll.Poll) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PollStore_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type PollStore_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - _a0 *poll.Poll
func (_e *PollStore_Expecter) Save(_a0 interface{}) *PollStore_Save_Call {
	return &PollStore_Save_Call{Call: _e.mock.On("Save", _a0)}
}

func (_c *PollStore_Save_Call) Run(run func(_a0 *poll.Poll)) *PollStore_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*poll.Poll))
	})
	return _c
}

func (_c *PollStore_Save_Call) Return(_a0 error) *PollStore_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PollStore_Save_Call) RunAndReturn(run func(*poll.Poll) error) *PollStore_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: oldPoll, newPoll
func (_m *PollStore) Update(oldPoll *poll.Poll, newPoll *poll.Poll) error {
	ret := _m.Called(oldPoll, newPoll)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*poll.Poll, *poll.Poll) error); ok {
		r0 = rf(oldPoll, newPoll)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PollStore_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type PollStore_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - oldPoll *poll.Poll
//   - newPoll *poll.Poll
func (_e *PollStore_Expecter) Update(oldPoll interface{}, newPoll interface{}) *PollStore_Update_Call {
	return &PollStore_Update_Call{Call: _e.mock.On("Update", oldPoll, newPoll)}
}

func (_c *PollStore_Update_Call) Run(run func(oldPoll *poll.Poll, newPoll *poll.Poll)) *PollStore_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*poll.Poll), args[1].(*poll.Poll))
	})
	return _c
}

func (_c *PollStore_Update_Call) Return(_a0 error) *PollStore_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PollStore_Update_Call) RunAndReturn(run func(*poll.Poll, *poll.Poll) error) *PollStore_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewPollStore creates a new instance of PollStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPollStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *PollStore {
	mock := &PollStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
