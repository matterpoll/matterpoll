// Code generated by mockery. DO NOT EDIT.

package mockstore

import mock "github.com/stretchr/testify/mock"

// SystemStore is an autogenerated mock type for the SystemStore type
type SystemStore struct {
	mock.Mock
}

type SystemStore_Expecter struct {
	mock *mock.Mock
}

func (_m *SystemStore) EXPECT() *SystemStore_Expecter {
	return &SystemStore_Expecter{mock: &_m.Mock}
}

// GetVersion provides a mock function with no fields
func (_m *SystemStore) GetVersion() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetVersion")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SystemStore_GetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersion'
type SystemStore_GetVersion_Call struct {
	*mock.Call
}

// GetVersion is a helper method to define mock.On call
func (_e *SystemStore_Expecter) GetVersion() *SystemStore_GetVersion_Call {
	return &SystemStore_GetVersion_Call{Call: _e.mock.On("GetVersion")}
}

func (_c *SystemStore_GetVersion_Call) Run(run func()) *SystemStore_GetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SystemStore_GetVersion_Call) Return(_a0 string, _a1 error) *SystemStore_GetVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SystemStore_GetVersion_Call) RunAndReturn(run func() (string, error)) *SystemStore_GetVersion_Call {
	_c.Call.Return(run)
	return _c
}

// SaveVersion provides a mock function with given fields: version
func (_m *SystemStore) SaveVersion(version string) error {
	ret := _m.Called(version)

	if len(ret) == 0 {
		panic("no return value specified for SaveVersion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SystemStore_SaveVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveVersion'
type SystemStore_SaveVersion_Call struct {
	*mock.Call
}

// SaveVersion is a helper method to define mock.On call
//   - version string
func (_e *SystemStore_Expecter) SaveVersion(version interface{}) *SystemStore_SaveVersion_Call {
	return &SystemStore_SaveVersion_Call{Call: _e.mock.On("SaveVersion", version)}
}

func (_c *SystemStore_SaveVersion_Call) Run(run func(version string)) *SystemStore_SaveVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SystemStore_SaveVersion_Call) Return(_a0 error) *SystemStore_SaveVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SystemStore_SaveVersion_Call) RunAndReturn(run func(string) error) *SystemStore_SaveVersion_Call {
	_c.Call.Return(run)
	return _c
}

// NewSystemStore creates a new instance of SystemStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSystemStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *SystemStore {
	mock := &SystemStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
