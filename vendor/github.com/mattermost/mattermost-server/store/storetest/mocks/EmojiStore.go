// Code generated by mockery v1.0.0

// Regenerate this file using `make store-mocks`.

package mocks

import mock "github.com/stretchr/testify/mock"
import model "github.com/mattermost/mattermost-server/model"
import store "github.com/mattermost/mattermost-server/store"

// EmojiStore is an autogenerated mock type for the EmojiStore type
type EmojiStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id, time
func (_m *EmojiStore) Delete(id string, time int64) store.StoreChannel {
	ret := _m.Called(id, time)

	var r0 store.StoreChannel
	if rf, ok := ret.Get(0).(func(string, int64) store.StoreChannel); ok {
		r0 = rf(id, time)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.StoreChannel)
		}
	}

	return r0
}

// Get provides a mock function with given fields: id, allowFromCache
func (_m *EmojiStore) Get(id string, allowFromCache bool) store.StoreChannel {
	ret := _m.Called(id, allowFromCache)

	var r0 store.StoreChannel
	if rf, ok := ret.Get(0).(func(string, bool) store.StoreChannel); ok {
		r0 = rf(id, allowFromCache)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.StoreChannel)
		}
	}

	return r0
}

// GetByName provides a mock function with given fields: name
func (_m *EmojiStore) GetByName(name string) store.StoreChannel {
	ret := _m.Called(name)

	var r0 store.StoreChannel
	if rf, ok := ret.Get(0).(func(string) store.StoreChannel); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.StoreChannel)
		}
	}

	return r0
}

// GetList provides a mock function with given fields: offset, limit
func (_m *EmojiStore) GetList(offset int, limit int) store.StoreChannel {
	ret := _m.Called(offset, limit)

	var r0 store.StoreChannel
	if rf, ok := ret.Get(0).(func(int, int) store.StoreChannel); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.StoreChannel)
		}
	}

	return r0
}

// Save provides a mock function with given fields: emoji
func (_m *EmojiStore) Save(emoji *model.Emoji) store.StoreChannel {
	ret := _m.Called(emoji)

	var r0 store.StoreChannel
	if rf, ok := ret.Get(0).(func(*model.Emoji) store.StoreChannel); ok {
		r0 = rf(emoji)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.StoreChannel)
		}
	}

	return r0
}
